{
    "questions": [
        {
            "id": 1,
            "path": "db/questions/1.jpg",
            "answer_options": [
                "contenteditable",
                "spellcheck",
                "editable",
                "content"
            ],
            "answer": {
                "right_answer": "spellcheck",
                "path": "db/answers/1.jpg"
            }
        },
        {
            "id": 2,
            "path": "db/questions/2.jpg",
            "answer_options": [
                "1 /n 5",
                "Error is thrown",
                "1 /n [2, 3, 4, 5]",
                "1 /n [3, 4, 5]"
            ],
            "answer": {
                "right_answer": "1 /n [3, 4, 5]",
                "path": "db/answers/2.jpg"
            }
        },
        {
            "id": 3,
            "path": "db/questions/3.jpg",
            "answer_options": [
                "list-style=\"roman\"",
                "list-style=\"i\"",
                "type=\"roman\"",
                "type=\"i\""
            ],
            "answer": {
                "right_answer": "type=\"i\"",
                "path": "db/answers/3.jpg"
            }
        },
        {
            "id": 4,
            "path": "db/questions/4.jpg",
            "answer_options": [
                "2",
                "3",
                "6",
                "Error is thrown"
            ],
            "answer": {
                "right_answer": "6",
                "path": "db/answers/4.jpg"
            }
        },
        {
            "id": 5,
            "path": "db/questions/5.jpg",
            "answer_options": [
                "place-items: end center;",
                "place-items: center end;",
                "align-items: end center;",
                "justify-items: center end;"
            ],
            "answer": {
                "right_answer": "place-items: end center;",
                "path": "db/answers/5.jpg"
            }
        },
        {
            "id": 6,
            "path": "db/questions/6.jpg",
            "answer_options": [
                "editable =\"false\"",
                "edit =\"false\"",
                "readonly",
                "disabled"
            ],
            "answer": {
                "right_answer": "readonly",
                "path": "db/answers/6.jpg"
            }
        },
        {
            "id": 7,
            "path": "db/questions/7.jpg",
            "answer_options": [
                "1",
                "null",
                "undefined",
                "Error is thrown"
            ],
            "answer": {
                "right_answer": "undefined",
                "path": "db/answers/7.jpg"
            }
        },
        {
            "id": 8,
            "path": "db/questions/8.jpg",
            "answer_options": [
                "begin",
                "order",
                "start",
                "Not possible"
            ],
            "answer": {
                "right_answer": "start",
                "path": "db/answers/8.jpg"
            }
        },
        {
            "id": 9,
            "path": "db/questions/9.jpg",
            "answer_options": [
                "[0, 1, 2, 3, 0]",
                "[2, 2, 3]",
                "[o, 1]",
                "[0, 1, 0]"
            ],
            "answer": {
                "right_answer": "[0, 1, 0]",
                "path": "db/answers/9.jpg"
            }
        },
        {
            "id": 10,
            "path": "db/questions/10.jpg",
            "answer_options": [
                "-1 / -1 / span 2 / span 2",
                "span 2 / span 2 / -1 / -1",
                "span 2 / -1 / span 2 / -1",
                "-1 / span 2 / -1 / span 2"
            ],
            "answer": {
                "right_answer": "span 2 / span 2 / -1 / -1",
                "path": "db/answers/10.jpg"
            }
        },
        {
            "id": 11,
            "path": "db/questions/11.jpg",
            "answer_options": [
                "<summary>",
                "<details>",
                "<figcaption>",
                "<span>"
            ],
            "answer": {
                "right_answer": "<figcaption>",
                "path": "db/answers/11.jpg"
            }
        },
        {
            "id": 12,
            "path": "db/questions/12.jpg",
            "answer_options": [
                "0 undefined",
                "0 20",
                "10 undefined",
                "10 20"
            ],
            "answer": {
                "right_answer": "10 20",
                "path": "db/answers/12.jpg"
            }
        },
        {
            "id": 13,
            "path": "db/questions/13.jpg",
            "answer_options": [
                "auto auto / 1fr 1fr",
                "auto auto / 1fr auto",
                "1fr 1fr / auto auto",
                "1fr auto / auto auto"
            ],
            "answer": {
                "right_answer": "auto auto / 1fr auto",
                "path": "db/answers/13.jpg"
            }
        },
        {
            "id": 14,
            "path": "db/questions/14.jpg",
            "answer_options": [
                "123 123",
                "123 456",
                "456 123",
                "456 456"
            ],
            "answer": {
                "right_answer": "456 123",
                "path": "db/answers/14.jpg"
            }
        },
        {
            "id": 15,
            "path": "db/questions/15.jpg",
            "answer_options": [
                ".item { flex: 1 0; ｝/n .item2 { flex: 0 1; }",
                ".item { flex: 0 1; ｝/n .item2 { flex: 1 0; }"
            ],
            "answer": {
                "right_answer": ".item { flex: 1 0; ｝/n .item2 { flex: 0 1; }",
                "path": "db/answers/15.jpg"
            }
        },
        {
            "id": 16,
            "path": "db/questions/16.jpg",
            "answer_options": [
                "false false",
                "false true",
                "true true",
                "true false"
            ],
            "answer": {
                "right_answer": "true true",
                "path": "db/answers/16.jpg"
            }
        },
        {
            "id": 17,
            "path": "db/questions/17.jpg",
            "answer_options": [
                "margin-right: auto",
                "margin-left: auto",
                "justify-self: start",
                "align-self: start"
            ],
            "answer": {
                "right_answer": "margin-right: auto",
                "path": "db/answers/17.jpg"
            }
        },
        {
            "id": 18,
            "path": "db/questions/18.jpg",
            "answer_options": [
                "undefined /n undefined",
                "123 /n undefined",
                "123 /n 123",
                "undefined /n 123"
            ],
            "answer": {
                "right_answer": "undefined /n 123",
                "path": "db/answers/18.jpg"
            }
        },
        {
            "id": 19,
            "path": "db/questions/19.jpg",
            "answer_options": [
                "place-self: start end;",
                "place-self: end start;",
                "place-items: start end;",
                "place-items: end start;"
            ],
            "answer": {
                "right_answer": "place-self: start end;",
                "path": "db/answers/19.jpg"
            }
        },
        {
            "id": 20,
            "path": "db/questions/20.jpg",
            "answer_options": [
                "Error is thrown",
                "lo",
                "llo",
                "he"
            ],
            "answer": {
                "right_answer": "lo",
                "path": "db/answers/20.jpg"
            }
        },
        {
            "id": 21,
            "path": "db/questions/21.jpg",
            "answer_options": [
                "1, 2, 3",
                "1, 3, 2",
                "3, 1, 2"
            ],
            "answer": {
                "right_answer": "1, 3, 2",
                "description": "<div><ul><li>Сначала создаётся промис и сразу выполняется его тело. Поэтому сначала в консоль выводится число 1.</li><li>После этого происходит вызов res(2), но выполнение кода продолжается дальше, так как промисы асинхронны. Поэтому следующий оператор console.log(3) выполняется сразу после создания промиса, а результат res(2) еще не обрабатывается.</li><li>Таким образом, после числа 1 в консоль выводится число 3, потому что обработка промисов происходит асинхронно и откладывается до завершения текущего стека вызова.</li><li>Когда текущие синхронные операции завершатся, очередь событий JavaScript перейдет к обработке промисов. Тогда выполнится коллбек-функция внутри .then(), которая выведет число 2.</li></ul></div>"
            }
        },
        {
            "id": 22,
            "path": "db/questions/22.jpg",
            "answer_options": [
                "1, 2, 3",
                "1, 1, 1",
                "undefined, undefined, undefined",
                "3 раза лямбда-функция"
            ],
            "answer": {
                "right_answer": "1, 1, 1",
                "description": "<div><p>const cl = increment;&nbsp;Обратите внимание, что здесь нет скобок после имени функции increment. Это означает, что переменная cl получает саму функцию increment, а не результат её выполнения. То есть cl теперь является ссылкой на функцию increment.</p><p>Шаг 3: Три последовательных вызова функции cl</p><p>console.log(cl());&nbsp;console.log(cl());&nbsp;console.log(cl());</p><p>Каждый раз, когда вызывается функция cl, фактически вызывается функция increment, которая создает новую область видимости с новой переменной counter, инициализированной значением 0. Поэтому каждый вызов функции cl создает свой собственный экземпляр переменной counter, который тут же увеличивается на единицу и уничтожается после возврата значения.</p></div>"
            }
        },
        {
            "id": 23,
            "path": "db/questions/23.jpg",
            "answer_options": [
                "0, 1, 2, 3, 4",
                "0, 1, 2, 3, 4, 5",
                "4, 4, 4, 4, 4",
                "5, 5, 5, 5, 5, 5"
            ],
            "answer": {
                "right_answer": "5, 5, 5, 5, 5, 5",
                "description": "<div><p>Шаг 4: Выполнение цикла<br />Цикл while проходит пять итераций, создавая пять таймеров с нулевой задержкой. Каждый таймер добавляет в очередь событий колбэк, который должен вывести текущее значение переменной i.</p><p>Шаг 5: Завершение цикла<br />После завершения цикла значение переменной i становится равным 5, поскольку цикл завершился, когда i стало равно 5.</p><p>Шаг 6: Выполнение отложенных задач<br />После завершения основного потока программы браузер начинает обрабатывать очередь событий. Все пять колбэков, созданные функцией setTimeout, будут выполнены последовательно. На момент их выполнения значение переменной i уже равно 5, поэтому все пять вызовов console.log(i) выведут одно и то же значение — 5.</p></div>"
            }
        },
        {
            "id": 24,
            "path": "db/questions/24.jpg",
            "answer_options": [
                "Ничего",
                "undefined",
                "1, 2, 3",
                "1, 1, 1"
            ],
            "answer": {
                "right_answer": "1, 1, 1"
            }
        },
        {
            "id": 25,
            "path": "db/questions/25.jpg",
            "answer_options": [
                "1, 1",
                "1",
                "1, undefined",
                "Ошибка"
            ],
            "answer": {
                "right_answer": "1, undefined",
                "description": "<div><p>Первая цепочка .then()</p><p>p.then((a) => console.log(a));Когда промис p успешно завершен, вызывается первая функция обратного вызова (a) => console.log(a). Она выводит значение a в консоль. Так как промис разрешился с результатом 1, в консоль будет выведено 1.</p><p>Вторая цепочка .then()</p><p>.then((b) => console.log(b));Вторая цепочка .then() выполняется после первой. Обратите внимание, что вторая функция обратного вызова не получает никакого аргумента от предыдущей цепочки, так как первая функция ничего не возвращает. По умолчанию, если функция не возвращает значение, возвращается undefined.</p><p>Поэтому вторая функция обратного вызова (b) => console.log(b) выведет в консоль значение b, которое будет undefined.</p></div>"
            }
        },
        {
            "id": 26,
            "path": "db/questions/26.jpg",
            "answer_options": [
                "4",
                "100",
                "101",
                "Ошибка присваивания"
            ],
            "answer": {
                "right_answer": "101",
                "description": "<div><p>Длина массива составляет 101, так как последний элемент находится под индексом 100, а индексация начинается с нуля.</p></div>"
            }
        },
        {
            "id": 27,
            "path": "db/questions/27.jpg",
            "answer_options": [
                "2, 3, 4, 1",
                "2, 4, 3, 1",
                "2, 4, 1, 3",
                "1, 2, 3, 4"
            ],
            "answer": {
                "right_answer": "2, 4, 3, 1",
                "description": "<div><ul><li>Синхронные операции выполняются первыми:</li><ul><li>Сначала выводится 2: console.log(2);</li><li>Затем выводится 4: console.log(4);</li></ul><li>Микрозадачи (промисы) выполняются после завершения синхронных операций:<ul><li>Промис Promise.resolve(3) мгновенно разрешен, и его коллбек console.log(3) выполняется после завершения синхронного кода.</li></ul></li><li>Задача из setTimeout выполняется последней, несмотря на нулевую задержку:<ul><li>Задача из setTimeout попадает в очередь макрозадач (macrotask queue) и выполняется после всех микрозадач.</li></ul></li></ul></div>"
            }
        },
        {
            "id": 28,
            "path": "db/questions/28.jpg",
            "answer_options": [
                "[1, 2]",
                "[1, 2, 3]",
                "3",
                "undefined"
            ],
            "answer": {
                "right_answer": "3",
                "description": "<div><p>Метод push возвращает новую длину массива, поэтому console.log выведет число 3, которое является длиной массива после добавления элемента.</p></div>"
            }
        },
        {
            "id": 29,
            "path": "db/questions/29.jpg",
            "answer_options": [
                "1",
                "undefined",
                "Ничего",
                "Ошибка"
            ],
            "answer": {
                "right_answer": "Ничего",
                "description": "<div><p>Здесь создается новый промис p, который не принимает аргументы в конструктор. Внутри конструктора промиса просто возвращается значение 1. Однако стоит отметить, что возвращение значения из конструктора промиса само по себе не влияет на разрешение или отклонение промиса. Для этого должны использоваться методы resolve или reject.</p><p>Ничего не будет выведено в консоль, так как промис не был корректно завершен.</p></div>"
            }
        },
        {
            "id": 30,
            "path": "db/questions/30.jpg",
            "answer_options": [
                "0, 0",
                "1, 1",
                "1, 2",
                "Некорректный синтаксис"
            ],
            "answer": {
                "right_answer": "1, 1",
                "description": "<div><p>Значения переменной count после первого и второго нажатия на кнопку остаются неизменными и равны 1, так как функция setCount всегда устанавливает значение +1, а не увеличивает текущее значение на единицу.</p></div>"
            }
        },
        {
            "id": 31,
            "path": "db/questions/31.jpg",
            "answer_options": [
                "Нет, все ок",
                "Да, на 1 строке",
                "Да, на 5 строке",
                "Да, на 7 строке"
            ],
            "answer": {
                "right_answer": "Нет, все ок"
            }
        },
        {
            "id": 32,
            "path": "db/questions/32.jpg",
            "answer_options": [
                "ComponentDidMount",
                "ComponentDidUpdate",
                "ComponentWillUnmount",
                "Все вышеперечисленные"
            ],
            "answer": {
                "right_answer": "Все вышеперечисленные"
            }
        }
    ],
    "total": 32
}